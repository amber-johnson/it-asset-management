# Generated by Django 3.0.4 on 2020-03-30 09:56

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('changeplan', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Datacenter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbr', models.CharField(max_length=6, unique=True)),
                ('name', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Rack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rack', models.CharField(max_length=4, validators=[django.core.validators.RegexValidator('^[A-Z]{1,2}[0-9]{2}$', message='Row number must be specified by one or two capital letters.')])),
                ('decommissioned', models.BooleanField(default=False)),
                ('datacenter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='equipment.Datacenter')),
                ('version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='changeplan.ChangePlan')),
            ],
            options={
                'unique_together': {('rack', 'datacenter', 'version')},
            },
        ),
        migrations.CreateModel(
            name='ITModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor', models.CharField(max_length=64)),
                ('model_number', models.CharField(max_length=64)),
                ('height', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='Height must be at least 1.')])),
                ('display_color', models.CharField(blank=True, default='#ddd', max_length=10, validators=[django.core.validators.RegexValidator('^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$', message='Please enter a valid color code.')])),
                ('power_ports', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0, message='Number of power ports must be at least 0.')])),
                ('network_ports', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0, message='Number of network ports must be at least 0.')])),
                ('cpu', models.CharField(blank=True, max_length=64)),
                ('memory', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, message='Number of GB of memory must be at least 0.')], verbose_name='Memory (GB)')),
                ('storage', models.CharField(blank=True, max_length=128)),
                ('comment', models.TextField(blank=True, validators=[django.core.validators.RegexValidator('(?m)(?![ \t]*(,|$))', message='Comments must be enclosed by double quotes if comment contains line breaks.')])),
            ],
            options={
                'verbose_name': 'Model',
                'verbose_name_plural': 'Models',
                'unique_together': {('vendor', 'model_number')},
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset_number', models.IntegerField(blank=True, null=True)),
                ('hostname', models.CharField(blank=True, max_length=64, null=True, validators=[django.core.validators.RegexValidator('^&|([a-zA-Z0-9](?:(?:[a-zA-Z0-9-]*|(?<!-)\\.(?![-.]))*[a-zA-Z0-9]+)?)$', message='Hostname must be compliant with RFC 1034.')])),
                ('rack_position', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='Rack position must be at least 1.')])),
                ('comment', models.TextField(blank=True, validators=[django.core.validators.RegexValidator('(?m)(?![ \t]*(,|$))', message='Comments must be enclosed by double quotes if value contains line breaks.')])),
                ('commissioned', models.CharField(choices=[('C', 'Commissioned')], default='C', max_length=1, null=True)),
                ('decommissioned_timestamp', models.DateTimeField(blank=True, null=True)),
                ('datacenter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='equipment.Datacenter')),
                ('decommissioned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='decommissioned_assets', to=settings.AUTH_USER_MODEL)),
                ('itmodel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='equipment.ITModel', verbose_name='Model')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=models.SET(None), related_name='owned_assets', to=settings.AUTH_USER_MODEL)),
                ('rack', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='equipment.Rack')),
                ('version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='changeplan.ChangePlan')),
            ],
            options={
                'unique_together': {('hostname', 'version', 'commissioned'), ('asset_number', 'version')},
            },
        ),
    ]
